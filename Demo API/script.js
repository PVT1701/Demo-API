const form = document.getElementById('search-form');
const imagesDiv = document.getElementById('images');

form.addEventListener('submit', async (event) => {
    event.preventDefault();
    const keyword = document.getElementById('keyword').value.trim();

    if (keyword === "") {
        alert("Vui l√≤ng nh·∫≠p t·ª´ kh√≥a!");
        return;
    }

    imagesDiv.innerHTML = "<p>ƒêang t·∫£i h√¨nh ·∫£nh...</p>";

    try {
        const response = await fetch(`https://api.unsplash.com/search/photos?query=${keyword}&per_page=12&client_id=rMbe8iwM_ArQhAsEQqEJ15cvTPtxiuRmyGU4nEuD824`);

        if (!response.ok) {
            throw new Error(`L·ªói HTTP! Tr·∫°ng th√°i: ${response.status}`);
        }

        const data = await response.json();

        if (!data.results || !Array.isArray(data.results) || data.results.length === 0) {
            imagesDiv.innerHTML = `<p style="color: red;">Kh√¥ng t√¨m th·∫•y h√¨nh ·∫£nh n√†o!</p>`;
            return;
        }

        displayImages(data.results);

    } catch (error) {
        console.error('L·ªói khi l·∫•y h√¨nh ·∫£nh:', error);
        imagesDiv.innerHTML = `<p style="color: red;">Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i sau!</p>`;
    }
});

function displayImages(images) {
    imagesDiv.innerHTML = '';

    images.forEach(image => {
        const imgDiv = document.createElement('div');
        imgDiv.classList.add('image');
        imgDiv.innerHTML = `<img src="${image.urls.small}" alt="${image.alt_description || 'H√¨nh ·∫£nh'}">`;
        imagesDiv.appendChild(imgDiv);
    });
}

const getWeatherBtn = document.getElementById('get-weather-btn');
const weatherResult = document.getElementById('weather-result');

getWeatherBtn.addEventListener('click', () => {
    if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(getWeather, showError);
    } else {
        weatherResult.innerHTML = `<p style="color: red;">Tr√¨nh duy·ªát kh√¥ng h·ªó tr·ª£ Geolocation.</p>`;
    }
});

async function getWeather(position) {
    const lat = position.coords.latitude;
    const lon = position.coords.longitude;
    const apiKey = '2e8c7590358a2452d96e614a78dd61b0';

    weatherResult.innerHTML = "<p>ƒêang l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt...</p>";

    try {
        const response = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&lang=vi&appid=${apiKey}`);


        if (!response.ok) {
            throw new Error(`L·ªói HTTP! Tr·∫°ng th√°i: ${response.status}`);
        }

        const data = await response.json();
        displayWeather(data);

    } catch (error) {
        console.error('L·ªói khi l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt:', error);
        weatherResult.innerHTML = `<p style="color: red;">Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt. Vui l√≤ng th·ª≠ l·∫°i!</p>`;
    }
}

function displayWeather(data) {
    weatherResult.innerHTML = `
        <h3 style="text-align: center;">Th·ªùi ti·∫øt t·∫°i ${data.name}, ${data.sys.country}</h3>
        <img src="http://openweathermap.org/img/wn/${data.weather[0].icon}@4x.png" alt="${data.weather[0].description}" style="display: block; margin: 0 auto;">
        <div style="display: flex; justify-content: space-between; gap: 20px;">
            <div style="text-align: justify; flex: 1; margin-left: 10px; color: white;">
                <p style="white-space: nowrap; font-size: 16px;">üå°Ô∏è <strong>Nhi·ªát ƒë·ªô:</strong> ${data.main.temp}¬∞C</p>
                <p style="white-space: nowrap; font-size: 16px;">üíß <strong>ƒê·ªô ·∫©m:</strong> ${data.main.humidity}%</p>
                <p style="white-space: nowrap; font-size: 16px;">üå™Ô∏è <strong>√Åp su·∫•t:</strong> ${data.main.pressure} mbar</p>
            </div>
            <div style="text-align: justify; flex: 1; color: white;" >
                <p style="white-space: nowrap; font-size: 16px;">üí®<strong>T·ªëc ƒë·ªô gi√≥:</strong> ${data.wind.speed} km/h</p>
                <p style="white-space: nowrap; font-size: 16px;">üß≠<strong>H∆∞·ªõng gi√≥:</strong>${getWindDirection(data.wind.deg)} (${data.wind.deg}¬∞)</p>
                <p style="white-space: nowrap; font-size: 16px;">‚õÖ<strong>Th·ªùi ti·∫øt:</strong> ${data.weather[0].description}</p>
            </div>
        </div>
    `;
}

function getWindDirection(deg) {
    if (deg >= 337.5 || deg < 22.5) return "‚¨ÜÔ∏è B·∫Øc";
    if (deg >= 22.5 && deg < 67.5) return "‚ÜóÔ∏è ƒê√¥ng B·∫Øc";
    if (deg >= 67.5 && deg < 112.5) return "‚û°Ô∏è ƒê√¥ng";
    if (deg >= 112.5 && deg < 157.5) return "‚ÜòÔ∏è ƒê√¥ng Nam";
    if (deg >= 157.5 && deg < 202.5) return "‚¨áÔ∏è Nam";
    if (deg >= 202.5 && deg < 247.5) return "‚ÜôÔ∏è T√¢y Nam";
    if (deg >= 247.5 && deg < 292.5) return "‚¨ÖÔ∏è T√¢y";
    if (deg >= 292.5 && deg < 337.5) return "‚ÜñÔ∏è T√¢y B·∫Øc";
    return "‚ùì Kh√¥ng x√°c ƒë·ªãnh";
}

function showError(error) {
    switch (error.code) {
        case error.PERMISSION_DENIED:
            weatherResult.innerHTML = `<p style="color: red;">B·∫°n ƒë√£ t·ª´ ch·ªëi quy·ªÅn truy c·∫≠p v·ªã tr√≠.</p>`;
            break;
        case error.POSITION_UNAVAILABLE:
            weatherResult.innerHTML = `<p style="color: red;">Kh√¥ng th·ªÉ x√°c ƒë·ªãnh v·ªã tr√≠.</p>`;
            break;
        case error.TIMEOUT:
            weatherResult.innerHTML = `<p style="color: red;">H·∫øt th·ªùi gian l·∫•y v·ªã tr√≠.</p>`;
            break;
        case error.UNKNOWN_ERROR:
            weatherResult.innerHTML = `<p style="color: red;">L·ªói kh√¥ng x√°c ƒë·ªãnh.</p>`;
            break;
    }
}